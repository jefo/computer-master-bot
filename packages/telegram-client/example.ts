// example.ts - Example usage of the Telegram client\n\nimport { TelegramClient } from './index';\n\n/**\n * Example bot implementation\n * This shows how to use the Telegram client in a real bot\n */\n\n// Replace with your actual bot token\nconst BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE';\n\nasync function main() {\n  // Initialize the client\n  const client = new TelegramClient(BOT_TOKEN);\n  \n  try {\n    // Get bot information\n    console.log('Getting bot information...');\n    const me = await client.getMe();\n    console.log(`Bot name: ${me.first_name}`);\n    console.log(`Username: @${me.username}`);\n    \n    // For demonstration purposes, we won't actually send a message\n    // as it requires a valid chat ID\n    console.log('\\nClient is ready to send messages!');\n    console.log('Use client.sendMessage({ chat_id: YOUR_CHAT_ID, text: \"Hello World\" }) to send a message.');\n    \n    // Example of how to get updates (this would be used in a polling bot)\n    console.log('\\nGetting updates...');\n    const updates = await client.getUpdates({\n      timeout: 30,\n      offset: 0\n    });\n    console.log(`Received ${updates.length} updates`);\n    \n    // Example usage of new methods\n    console.log('\\nNew methods available:');\n    console.log('Use client.answerCallbackQuery({ callback_query_id: \"query_id\", text: \"Response text\" }) to answer callback queries.');\n    console.log('Use client.editMessageText({ chat_id: chat_id, message_id: msg_id, text: \"New text\" }) to edit message text.');\n    console.log('Use client.editMessageReplyMarkup({ chat_id: chat_id, message_id: msg_id, reply_markup: markup }) to update only buttons.');\n    \n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\n// Run the example\nif (import.meta.main) {\n  main();\n}