import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup, Message } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "@src/infra/message-builder";

// --- Mock Data ---
const MOCK_STORES = [
    { id: "store_1", name: "–¢–¶ '–ì–∞–ª–µ—Ä–µ—è'" },
    { id: "store_2", name: "–¢–†–ö '–ü–ª–∞–Ω–µ—Ç–∞'" },
    { id: "store_3", name: "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 105" },
];

// --- Generic Helper ---
async function sendOrEdit(client: TelegramClient, chatId: number, text: string, keyboard: InlineKeyboardMarkup, messageId?: number): Promise<Message> {
    const payload = { chat_id: chatId, text, reply_markup: keyboard, parse_mode: "MarkdownV2" as const };
    if (messageId) {
        const result = await client.editMessageText({ ...payload, message_id: messageId });
        // editMessageText can return true, so we construct a mock Message for consistency
        return typeof result === 'boolean' ? { message_id: messageId, chat: { id: chatId }, date: Date.now() } : result;
    } else {
        return await client.sendMessage(payload);
    }
}

// --- Role-Specific Menus ---

export const showSellerMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–ú–µ–Ω—é –ü—Ä–æ–¥–∞–≤—Ü–∞-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?").build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üöÄ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", callback_data: "seller_start_shift" }],
            [{ text: "üìä –ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data: "seller_my_stats" }],
            [{ text: "üìö –í—Å–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", callback_data: "seller_work_materials" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showSupervisorMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–ú–µ–Ω—é –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.").build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫", callback_data: "sup_store_stats" }],
            [{ text: "üë• –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data: "sup_seller_stats" }],
            [{ text: "üìö –í—Å–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", callback_data: "sup_work_materials" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showManagerMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–ú–µ–Ω—é –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.").build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫", callback_data: "man_store_stats" }],
            [{ text: "üë• –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data: "man_seller_stats" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

// --- Seller Flow Screens ---

export const showStoreSelection = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder().addText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É:").build();
    const storeButtons = MOCK_STORES.map(store => ([{ text: store.name, callback_data: `select_store_${store.id}` }]));
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            ...storeButtons,
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_seller_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showActiveShiftMenu = async (client: TelegramClient, chatId: number, storeName: string, messageId: number) => {
    const text = new MessageBuilder()
        .addText("‚úÖ –°–º–µ–Ω–∞ –≤ ")
        .addBold(storeName)
        .addText(" –Ω–∞—á–∞—Ç–∞. –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã!")
        .build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìã –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É –∏ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data: "seller_end_shift" }],
            [{ text: "üèÉ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ", callback_data: "seller_emergency_close" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const askForRevenue = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ")
        .addBold("–æ–±—â—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏")
        .addText(" –∑–∞ —Å–º–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        .build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForCashAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–Ω–∞–ª–∏—á–Ω—ã—Ö").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForCardAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–±–µ–∑–Ω–∞–ª–∞").addText(" (–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π):").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForQrAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ ").addBold("QR-–∫–æ–¥—É").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForTransferAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–ø–µ—Ä–µ–≤–æ–¥–æ–º").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForReturnsAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–≤–æ–∑–≤—Ä–∞—Ç–æ–≤").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForPhotos = async (client: TelegramClient, chatId: number, messageId: number | undefined, uploadedCount: number) => {
    const photoPrompts = [
        "1/4: –§–æ—Ç–æ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ —Å –≤—ã—Ä—É—á–∫–æ–π",
        "2/4: –§–æ—Ç–æ —Å–≤–æ–¥–Ω—ã—Ö —á–µ–∫–æ–≤",
        "3/4: –§–æ—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ –ª–µ–∂–∏—Ç",
        "4/4: –§–æ—Ç–æ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞",
    ];

    if (uploadedCount >= photoPrompts.length) {
        return await showReportReview(client, chatId, messageId!, {}); // Pass mock data
    } else {
        const text = new MessageBuilder()
            .addText(`–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ. (${uploadedCount + 1}/4)`)
            .newLine(2)
            .addBold(photoPrompts[uploadedCount])
            .build();
        return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
    }
};

export const showReportReview = async (client: TelegramClient, chatId: number, messageId: number, reportData: any) => {
    const builder = new MessageBuilder()
        .addTitle("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç")
        .newLine(2)
        .addListItem(`–í—ã—Ä—É—á–∫–∞: ${reportData.revenue || '10000'} —Ä—É–±.`)
        .addListItem(`–ù–∞–ª–∏—á–Ω—ã–µ: ${reportData.cash || '2000'} —Ä—É–±.`)
        .addListItem(`–ë–µ–∑–Ω–∞–ª: ${reportData.card || '5000'} —Ä—É–±.`)
        .addListItem(`QR-–∫–æ–¥: ${reportData.qr || '1500'} —Ä—É–±.`)
        .addListItem(`–ü–µ—Ä–µ–≤–æ–¥: ${reportData.transfer || '1500'} —Ä—É–±.`)
        .addListItem(`–í–æ–∑–≤—Ä–∞—Ç—ã: ${reportData.returns || '0'} —Ä—É–±.`)
        .newLine()
        .addText("–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ 4 —Ñ–æ—Ç–æ.")
        .newLine(2)
        .addText("–í—Å–µ –≤–µ—Ä–Ω–æ?");

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data: "report_confirm" }],
            [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data: "report_edit" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

export const showShiftEndMessage = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder().addText("‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É, —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!").build();
    const sentMessage = await sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
    // Show main menu again after a delay
    setTimeout(() => showSellerMenu(client, chatId), 2000);
    return sentMessage;
};

export const showEmergencyClosePrompt = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder()
        .addText("üèÉ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ. –í–≤–µ–¥–∏—Ç–µ ")
        .addBold("–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤—ã—Ä—É—á–∫–∏")
        .addText(" –Ω–∞ –º–æ–º–µ–Ω—Ç —É—Ö–æ–¥–∞:")
        .build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

// --- Placeholder Screens ---

export const showInDevelopment = async (client: TelegramClient, queryId: string) => {
    await client.answerCallbackQuery({
        callback_query_id: queryId,
        text: "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        show_alert: true,
    });
};