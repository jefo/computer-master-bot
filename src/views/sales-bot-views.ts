import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup, Message } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "@src/infra/message-builder";
import { 
  getSellerById, 
  getShiftsForSeller, 
  getMonthlyStatsForSeller, 
  getStoreById,
  getMaterialsByCategory,
  MOCK_WORK_MATERIALS,
  MOCK_SELLERS,
  MOCK_STORES,
  Seller,
  MonthlyStats,
  WorkMaterial
} from "@src/app/mock-data";



// --- Generic Helper ---
async function sendOrEdit(client: TelegramClient, chatId: number, text: string, keyboard: InlineKeyboardMarkup, messageId?: number): Promise<Message> {
    const payload = { chat_id: chatId, text, reply_markup: keyboard, parse_mode: "MarkdownV2" as const };
    if (messageId) {
        const result = await client.editMessageText({ ...payload, message_id: messageId });
        // editMessageText can return true, so we construct a mock Message for consistency
        return typeof result === 'boolean' ? { message_id: messageId, chat: { id: chatId }, date: Date.now() } : result;
    } else {
        return await client.sendMessage(payload);
    }
}

// --- Role-Specific Menus ---

export const showSellerMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–ú–µ–Ω—é –ü—Ä–æ–¥–∞–≤—Ü–∞-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?").build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üöÄ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", callback_data: "seller_start_shift" }],
            [{ text: "üìä –ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data: "seller_my_stats" }],
            [{ text: "üìö –í—Å–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", callback_data: "seller_work_materials" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showSupervisorMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–ú–µ–Ω—é –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.").build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫", callback_data: "sup_store_stats" }],
            [{ text: "üë• –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data: "sup_seller_stats" }],
            [{ text: "üìö –í—Å–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã", callback_data: "sup_work_materials" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showManagerMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–ú–µ–Ω—é –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.").build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫", callback_data: "man_store_stats" }],
            [{ text: "üë• –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", callback_data: "man_seller_stats" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

// --- Seller Flow Screens ---

export const showStoreSelection = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder().addText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É:").build();
    const storeButtons = MOCK_STORES.map(store => ([{ text: store.name, callback_data: `select_store_${store.id}` }]));    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            ...storeButtons,
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_seller_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showActiveShiftMenu = async (client: TelegramClient, chatId: number, storeName: string, messageId: number) => {
    const text = new MessageBuilder()
        .addText("‚úÖ –°–º–µ–Ω–∞ –≤ ")
        .addBold(storeName)
        .addText(" –Ω–∞—á–∞—Ç–∞. –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã!")
        .build();
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìã –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É –∏ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data: "seller_end_shift" }],
            [{ text: "üèÉ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ", callback_data: "seller_emergency_close" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

// Helper function to simulate saving with progress indicator
async function simulateSave(client: TelegramClient, chatId: number, messageId: number | undefined, savingText: string, completionText: string) {
    // Show saving message
    const progressMessage = await sendOrEdit(client, chatId, savingText, { inline_keyboard: [] }, messageId);
    
    // Simulate a delay to represent processing
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Update message to show completion
    return await sendOrEdit(client, chatId, completionText, { inline_keyboard: [] }, progressMessage.message_id);
}

export const askForRevenue = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ")
        .addBold("–æ–±—â—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏")
        .addText(" –∑–∞ —Å–º–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        .build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForCashAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–Ω–∞–ª–∏—á–Ω—ã—Ö").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForCardAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–±–µ–∑–Ω–∞–ª–∞").addText(" (–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π):").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForQrAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ ").addBold("QR-–∫–æ–¥—É").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForTransferAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–ø–µ—Ä–µ–≤–æ–¥–æ–º").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForReturnsAmount = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder().addText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ").addBold("–≤–æ–∑–≤—Ä–∞—Ç–æ–≤").addText(":").build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

export const askForPhotos = async (client: TelegramClient, chatId: number, messageId: number | undefined, uploadedCount: number) => {
    const photoPrompts = [
        "1/4: –§–æ—Ç–æ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ —Å –≤—ã—Ä—É—á–∫–æ–π",
        "2/4: –§–æ—Ç–æ —Å–≤–æ–¥–Ω—ã—Ö —á–µ–∫–æ–≤",
        "3/4: –§–æ—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ –ª–µ–∂–∏—Ç",
        "4/4: –§–æ—Ç–æ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞",
    ];

    if (uploadedCount >= photoPrompts.length) {
        return await showReportReview(client, chatId, messageId!, {}); // Pass mock data
    } else {
        const text = new MessageBuilder()
            .addText(`–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ. (${uploadedCount + 1}/4)`)
            .newLine(2)
            .addBold(photoPrompts[uploadedCount])
            .build();
        return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
    }
};

export const showReportReview = async (client: TelegramClient, chatId: number, messageId: number, reportData: any) => {
    // Calculate total revenue (according to business logic: revenue = cash + card + qr + transfer - returns)
    const cash = Number(reportData.cash) || 0;
    const card = Number(reportData.card) || 0;
    const qr = Number(reportData.qr) || 0;
    const transfer = Number(reportData.transfer) || 0;
    const returns = Number(reportData.returns) || 0;
    
    const totalRevenue = cash + card + qr + transfer - returns;
    
        const builder = new MessageBuilder()
        .addTitle("üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
        .newLine(2)
        .addBold("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∏–¥–∞–º –æ–ø–ª–∞—Ç—ã:")
        .newLine(2)
        .addListItem(`üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç: ${card.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine()
        .addListItem(`üíµ –ù–∞–ª–∏—á–Ω—ã–µ: ${cash.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine()
        .addListItem(`üì± –û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É: ${qr.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine()
        .addListItem(`üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–º: ${transfer.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine(2)
        .addBold("–í–æ–∑–≤—Ä–∞—Ç—ã:")
        .newLine(2)
        .addListItem(`‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã: ${returns.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine(2)
        .addBold(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine(2)
        .addText("üì∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–æ 4 —Ñ–æ—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        .newLine(2)
        .addText("‚Ä¢ –§–æ—Ç–æ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ")
        .newLine()
        .addText("‚Ä¢ –§–æ—Ç–æ —Å–≤–æ–¥–Ω—ã—Ö —á–µ–∫–æ–≤")
        .newLine()
        .addText("‚Ä¢ –§–æ—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º") 
        .newLine()
        .addText("‚Ä¢ –§oto –∑–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞")
        .newLine(2)
        .addText("–í—Å–µ –≤–µ—Ä–Ω–æ?");

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data: "report_confirm" }],
            [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data: "report_edit" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

export const showShiftEndMessage = async (client: TelegramClient, chatId: number, messageId: number) => {
    // First, show a "saving" message with progress indicator
    const progressText = new MessageBuilder().addText("‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...").build();
    const progressMessage = await sendOrEdit(client, chatId, progressText, { inline_keyboard: [] }, messageId);
    
    // Simulate saving process with a delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Update message to show completion
    const completionText = new MessageBuilder().addText("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É, —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!").build();
    const sentMessage = await sendOrEdit(client, chatId, completionText, { inline_keyboard: [] }, progressMessage.message_id);
    
    // Show main menu again after a delay
    setTimeout(() => showSellerMenu(client, chatId), 2000);
    return sentMessage;
};

export const showEmergencyClosePrompt = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addText("üèÉ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ. –í–≤–µ–¥–∏—Ç–µ ")
        .addBold("–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤—ã—Ä—É—á–∫–∏")
        .addText(" –Ω–∞ –º–æ–º–µ–Ω—Ç —É—Ö–æ–¥–∞:")
        .build();
    return sendOrEdit(client, chatId, text, { inline_keyboard: [] }, messageId);
};

// --- Seller Stats ---
export const showSellerMyStats = async (client: TelegramClient, chatId: number, messageId?: number) => {
    // For demonstration purposes, we'll use a hardcoded seller ID
    // In a real implementation, we would get the seller ID from the user session
    const sellerId = "seller_1";
    const seller: Seller | undefined = getSellerById(sellerId);
    
    if (!seller) {
        const errorText = new MessageBuilder()
            .addText("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")
            .build();
        const keyboard: InlineKeyboardMarkup = {
            inline_keyboard: [
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_seller_menu" }],
            ],
        };
        return sendOrEdit(client, chatId, errorText, keyboard, messageId);
    }

    // Get shifts for this seller
    const shifts = getShiftsForSeller(sellerId);
    
    const builder = new MessageBuilder()
        .addTitle(`üìä –í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü`)
        .newLine(2)
        .addListItem(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`)
        .addListItem(`–°–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${shifts.length}`)
        .newLine(2)
        .addBold("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞:")
        .newLine()
        .addRawText(createPlanCompletionText(seller.currentRevenue, seller.monthlyPlan))
        .newLine(2)
        .addText("\(–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\)");

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìÖ –ê—Ä—Ö–∏–≤ –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data: "seller_monthly_archive" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_seller_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

// Helper function to create a visual progress bar
function createProgressBar(percentage: number): string {
    const width = 12;
    const filledBlocks = Math.min(width, Math.floor(percentage / (100/width)));
    const emptyBlocks = width - filledBlocks;
    return `„Äê${'‚ñà'.repeat(filledBlocks)}${'‚ñë'.repeat(emptyBlocks)}„Äë ${percentage.toFixed(1)}%`;
}

// Helper function for displaying plan completion with visual indicators
function createPlanCompletionText(current: number | undefined, plan: number | undefined): string {
    // Handle undefined values
    const currentVal = current ?? 0;
    const planVal = plan ?? 0;
    
    const percentage = planVal > 0 ? (currentVal / planVal * 100) : 0;
    const remaining = planVal - currentVal;
    
    return new MessageBuilder()
        .addText(`–í—ã—Ä—É—á–∫–∞: ${currentVal.toLocaleString('ru-RU')} —Ä—É–±. –∏–∑ ${planVal.toLocaleString('ru-RU')} —Ä—É–±.`)
        .newLine()
        .addText(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${createProgressBar(percentage)}`)
        .newLine()
        .addText(remaining > 0 
            ? `–û—Å—Ç–∞–ª–æ—Å—å: ${Math.max(0, remaining).toLocaleString('ru-RU')} —Ä—É–±.` 
            : '‚úÖ –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!')
        .build();
}

// --- Seller Monthly Archive ---
export const showSellerMonthlyArchive = async (client: TelegramClient, chatId: number, messageId?: number) => {
    // For demonstration purposes, we'll use a hardcoded seller ID
    const sellerId = "seller_1";
    const monthlyStats = getMonthlyStatsForSeller(sellerId);
    
    const builder = new MessageBuilder()
        .addTitle("üìÖ –ê—Ä—Ö–∏–≤ –ø–æ –º–µ—Å—è—Ü–∞–º")
        .newLine(2);

    if (monthlyStats.length === 0) {
        builder.addText("–ê—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    } else {
        monthlyStats.forEach((monthData: MonthlyStats) => {
            const monthName = new Date(monthData.month + "-01").toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
            const remaining = monthData.plan - monthData.revenue;
            const percentage = (monthData.revenue / monthData.plan * 100).toFixed(1);
            
            builder
                .addBold(`${monthName.toUpperCase()}`)
                .newLine()
                .addListItem(`–ù–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${monthData.revenue.toLocaleString('ru-RU')} —Ä—É–±.`)
                .addListItem(`–ü–ª–∞–Ω: ${monthData.plan.toLocaleString('ru-RU')} —Ä—É–±.`)
                .addListItem(`–û—Å—Ç–∞—Ç–æ–∫ –¥–æ –ø–ª–∞–Ω–∞: ${Math.max(0, remaining).toLocaleString('ru-RU')} —Ä—É–±. (${percentage}%)`)
                .addText(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${createProgressBar(parseFloat(percentage))}`)
                .newLine(2);
        });
    }

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "seller_my_stats" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

// --- Supervisor/Manager Stats ---
export const showSupervisorStoreStats = async (client: TelegramClient, chatId: number, messageId?: number) => {
    // For this demo, we'll show all stores
    // In a real implementation, we would only show stores assigned to this supervisor
    const allStores = MOCK_STORES;
    
    const builder = new MessageBuilder()
        .addTitle("üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
        .newLine(2);
    
    allStores.forEach(store => {
        builder
            .addBold(store.name)
            .newLine()
            .addRawText(createPlanCompletionText(store.currentRevenue, store.monthlyPlan))
            .newLine(2);
    });

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_supervisor_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

export const showSupervisorSellerStats = async (client: TelegramClient, chatId: number, messageId?: number) => {
    // For this demo, we'll show all sellers
    // In a real implementation, we would only show sellers under this supervisor's purview
    const allSellers = MOCK_SELLERS;
    
    const builder = new MessageBuilder()
        .addTitle("üë• –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
        .newLine(2);
    
    allSellers.forEach(seller => {
        builder
            .addBold(seller.name)
            .newLine()
            .addRawText(createPlanCompletionText(seller.currentRevenue, seller.monthlyPlan))
            .newLine(2);
    });

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_supervisor_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

export const showManagerStoreStats = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const allStores = MOCK_STORES;
    
    // Calculate totals
    const totalPlan = allStores.reduce((sum, store) => sum + store.monthlyPlan, 0);
    const totalRevenue = allStores.reduce((sum, store) => sum + store.currentRevenue, 0);
    
    const builder = new MessageBuilder()
        .addTitle("üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
        .newLine(2)
        .addBold("–û–±—â–∏–π –∏—Ç–æ–≥:")
        .newLine()
        .addRawText(createPlanCompletionText(totalRevenue, totalPlan))
        .newLine(2)
        .addBold("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ—á–∫–∞–º:").newLine();
    
    allStores.forEach(store => {
        builder
            .addBold(`‚Ä¢ ${store.name}`)
            .newLine()
            .addRawText(createPlanCompletionText(store.currentRevenue, store.monthlyPlan))
            .newLine();
    });

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_manager_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

export const showManagerSellerStats = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const allSellers = MOCK_SELLERS;
    
    // Calculate totals
    const totalPlan = allSellers.reduce((sum, seller) => sum + seller.monthlyPlan, 0);
    const totalRevenue = allSellers.reduce((sum, seller) => sum + seller.currentRevenue, 0);
    
    const builder = new MessageBuilder()
        .addTitle("üë• –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
        .newLine(2)
        .addBold("–û–±—â–∏–π –∏—Ç–æ–≥:")
        .newLine()
        .addRawText(createPlanCompletionText(totalRevenue, totalPlan))
        .newLine(2)
        .addBold("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º:").newLine();
    
    allSellers.forEach(seller => {
        builder
            .addBold(`‚Ä¢ ${seller.name}`)
            .newLine()
            .addRawText(createPlanCompletionText(seller.currentRevenue, seller.monthlyPlan))
            .newLine();
    });

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_manager_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
};

// --- Placeholder Screens ---

// --- Report Form ---
export const showReportForm = async (client: TelegramClient, chatId: number, messageId: number | undefined, reportData: any, editingField?: string) => {
    // Status indicators
    const cashStatus = (reportData.cash !== undefined && reportData.cash !== '') ? '‚úÖ' : '‚òëÔ∏è';
    const cardStatus = (reportData.card !== undefined && reportData.card !== '') ? '‚úÖ' : '‚òëÔ∏è';
    const qrStatus = (reportData.qr !== undefined && reportData.qr !== '') ? '‚úÖ' : '‚òëÔ∏è';
    const transferStatus = (reportData.transfer !== undefined && reportData.transfer !== '') ? '‚úÖ' : '‚òëÔ∏è';
    const returnsStatus = (reportData.returns !== undefined && reportData.returns !== '') ? '‚úÖ' : '‚òëÔ∏è';

    // Format values or show placeholder
    const cashValue = (reportData.cash !== undefined && reportData.cash !== '') ? 
        `${Number(reportData.cash).toLocaleString('ru-RU')} —Ä—É–±.` : '...';
    const cardValue = (reportData.card !== undefined && reportData.card !== '') ? 
        `${Number(reportData.card).toLocaleString('ru-RU')} —Ä—É–±.` : '...';
    const qrValue = (reportData.qr !== undefined && reportData.qr !== '') ? 
        `${Number(reportData.qr).toLocaleString('ru-RU')} —Ä—É–±.` : '...';
    const transferValue = (reportData.transfer !== undefined && reportData.transfer !== '') ? 
        `${Number(reportData.transfer).toLocaleString('ru-RU')} —Ä—É–±.` : '...';
    const returnsValue = (reportData.returns !== undefined && reportData.returns !== '') ? 
        `${Number(reportData.returns).toLocaleString('ru-RU')} —Ä—É–±.` : '...';

    // Calculate total if all values are present
    const allFieldsFilled = cashValue !== '...' && cardValue !== '...' && 
                           qrValue !== '...' && transferValue !== '...' && returnsValue !== '...';
    
    let totalRevenueText = '...';
    if (allFieldsFilled) {
        const cash = Number(reportData.cash) || 0;
        const card = Number(reportData.card) || 0;
        const qr = Number(reportData.qr) || 0;
        const transfer = Number(reportData.transfer) || 0;
        const returns = Number(reportData.returns) || 0;
        
        const totalRevenue = cash + card + qr + transfer - returns;
        totalRevenueText = `${totalRevenue.toLocaleString('ru-RU')} —Ä—É–±.`;
    }

    // Add special instruction if a field is being edited
    let fieldLabel = "";
    let fieldIcon = "";
    if (editingField) {
        if (editingField === "cash") {
            fieldLabel = "–Ω–∞–ª–∏—á–Ω—ã–µ";
            fieldIcon = "üíµ";
        }
        else if (editingField === "card") {
            fieldLabel = "–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç";
            fieldIcon = "üí≥";
        }
        else if (editingField === "qr") {
            fieldLabel = "–æ–ø–ª–∞—Ç—É –ø–æ QR-–∫–æ–¥—É";
            fieldIcon = "üì±";
        }
        else if (editingField === "transfer") {
            fieldLabel = "–ø–µ—Ä–µ–≤–æ–¥–æ–º";
            fieldIcon = "üîÑ";
        }
        else if (editingField === "returns") {
            fieldLabel = "–≤–æ–∑–≤—Ä–∞—Ç—ã";
            fieldIcon = "‚Ü©Ô∏è";
        }
    }
    
    const builder = new MessageBuilder()
        .addTitle("üìã –§–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–º–µ–Ω—É")
        .newLine(2)
        .addBold("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è:");
    
    if (editingField) {
        builder.addText(` ${fieldIcon} –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ª—è "${fieldLabel}":`);
    }
    builder.newLine(2);
    
    // Add indicators for fields with arrows if they are being edited
    const cardIndicator = (editingField === 'card') ? ' üëâ' : '';
    const cashIndicator = (editingField === 'cash') ? ' üëâ' : '';
    const qrIndicator = (editingField === 'qr') ? ' üëâ' : '';
    const transferIndicator = (editingField === 'transfer') ? ' üëâ' : '';
    const returnsIndicator = (editingField === 'returns') ? ' üëâ' : '';
    
    builder
        .addText(`${cardStatus} üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç: ${cardValue}${cardIndicator}`)
        .newLine()
        .addText(`${cashStatus} üíµ –ù–∞–ª–∏—á–Ω—ã–µ: ${cashValue}${cashIndicator}`)
        .newLine()
        .addText(`${qrStatus} üì± –û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É: ${qrValue}${qrIndicator}`)
        .newLine()
        .addText(`${transferStatus} üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–º: ${transferValue}${transferIndicator}`)
        .newLine()
        .addText(`${returnsStatus} ‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã: ${returnsValue}${returnsIndicator}`)
        .newLine(2)
        .addBold(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenueText}`)
        .newLine(2)
        .addText("–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.")
        .newLine()
        .addText("–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º –ø–æ–ª–µ–º.");

    // Create keyboard with edit buttons for each field, with indicator for currently editing field
    const cardButtonText = (editingField === 'card') ? `üí≥ –ë–µ–∑–Ω–∞–ª ${cardStatus} üëà` : `üí≥ –ë–µ–∑–Ω–∞–ª ${cardStatus}`;
    const cashButtonText = (editingField === 'cash') ? `üíµ –ù–∞–ª–∏—á–Ω—ã–µ ${cashStatus} üëà` : `üíµ –ù–∞–ª–∏—á–Ω—ã–µ ${cashStatus}`;
    const qrButtonText = (editingField === 'qr') ? `üì± QR-–∫–æ–¥ ${qrStatus} üëà` : `üì± QR-–∫–æ–¥ ${qrStatus}`;
    const transferButtonText = (editingField === 'transfer') ? `üîÑ –ü–µ—Ä–µ–≤–æ–¥ ${transferStatus} üëà` : `üîÑ –ü–µ—Ä–µ–≤–æ–¥ ${transferStatus}`;
    const returnsButtonText = (editingField === 'returns') ? `‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã ${returnsStatus} üëà` : `‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã ${returnsStatus}`;

    // Create keyboard with edit buttons for each field
    const keyboard: InlineKeyboardMarkup = [
        [
            { text: cardButtonText, callback_data: "edit_card" },
            { text: cashButtonText, callback_data: "edit_cash" },
            { text: qrButtonText, callback_data: "edit_qr" }
        ],
        [
            { text: transferButtonText, callback_data: "edit_transfer" },
            { text: returnsButtonText, callback_data: "edit_returns" }
        ]
    ];

    // Add confirm button only if all fields are filled
    if (allFieldsFilled) {
        const cashValue = Number(reportData.cash) || 0;
        const cardValue = Number(reportData.card) || 0;
        const qrValue = Number(reportData.qr) || 0;
        const transferValue = Number(reportData.transfer) || 0;
        const returnsValue = Number(reportData.returns) || 0;
        
        const totalRevenue = cashValue + cardValue + qrValue + transferValue - returnsValue;
        keyboard.push([{ text: `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç: ${totalRevenue.toLocaleString('ru-RU')} —Ä—É–±.`, callback_data: "report_form_confirm" }]);
    }

    keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_seller_menu" }]);

    return sendOrEdit(client, chatId, builder.build(), { inline_keyboard: keyboard }, messageId);
};

// --- Work Materials Section ---
export const showWorkMaterialsMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addTitle("üìö –í—Å–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        .newLine(2)
        .addText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üìã –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã", callback_data: "work_materials_regulations" }],
            [{ text: "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data: "work_materials_info" }],
            [{ text: "üí¨ –°–∫—Ä–∏–ø—Ç—ã", callback_data: "work_materials_scripts" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_seller_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showWorkMaterialsByCategory = async (client: TelegramClient, chatId: number, category: string, messageId?: number) => {
    // Map category to proper display name
    const categoryNames: Record<string, string> = {
        'regulations': 'üìã –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã',
        'materials': 'üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 
        'scripts': 'üí¨ –°–∫—Ä–∏–ø—Ç—ã'
    };
    
    const categoryName = categoryNames[category] || '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã';
    const materials = getMaterialsByCategory(category);
    
    const builder = new MessageBuilder()
        .addTitle(categoryName)
        .newLine(2);
    
    if (materials.length === 0) {
        builder.addText("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    } else {
        materials.forEach((material: WorkMaterial) => {
            builder
                .addListItem(`${material.title}`)
                .addText(` (${material.fileSize})`)
                .newLine();
        });
    }
    
    const text = builder.build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "work_materials_menu" }],
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

// --- Role Selection Menu ---
export const showRoleSelectionMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addTitle("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Sales Bot")
        .newLine(2)
        .addText("–≠—Ç–æ proof-of-concept –±–æ—Ç, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏.")
        .newLine(2)
        .addText("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º:")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [
                { text: "üíº –ü—Ä–æ–¥–∞–≤–µ—Ü", callback_data: "role_seller" },
                { text: "üìã –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä", callback_data: "role_supervisor" }
            ],
            [
                { text: "üìä –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", callback_data: "role_manager" }
            ]
        ],
    };
    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showInDevelopment = async (client: TelegramClient, queryId: string) => {
    await client.answerCallbackQuery({
        callback_query_id: queryId,
        text: "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        show_alert: true,
    });
};