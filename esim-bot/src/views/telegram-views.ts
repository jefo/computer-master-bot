import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "../infra/message-builder";
import {
	getConversationState,
	setConversationState,
} from "src/infra/conversation-state";

// Mock data for eSIM plans - in a real app, this would come from an API
const mockESimPlans = [
	{
		id: "eu_3days",
		country: "–ï–≤—Ä–æ–ø–∞",
		description: "3 –¥–Ω—è, 5 –ì–ë",
		price: 12,
		currency: "USD",
		coverage: ["DE", "FR", "IT", "ES", "NL"],
		icon: "üá™",
		popular: false,
		features: ["–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G"],
	},
	{
		id: "eu_7days",
		country: "–ï–≤—Ä–æ–ø–∞",
		description: "7 –¥–Ω–µ–π, 10 –ì–ë",
		price: 25,
		currency: "USD",
		coverage: ["DE", "FR", "IT", "ES", "NL", "UK", "CH"],
		icon: "üá™",
		popular: true,
		features: [
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π WhatsApp",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
		],
	},
	{
		id: "eu_15days",
		country: "–ï–≤—Ä–æ–ø–∞",
		description: "15 –¥–Ω–µ–π, 25 –ì–ë",
		price: 45,
		currency: "USD",
		coverage: ["DE", "FR", "IT", "ES", "NL", "UK", "CH", "SE", "NO"],
		icon: "üá™",
		popular: false,
		features: [
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
			"–õ–æ–∫–∞–ª—å–Ω—ã–π IP",
		],
	},
	{
		id: "us_5days",
		country: "–°–®–ê",
		description: "5 –¥–Ω–µ–π, 5 –ì–ë",
		price: 20,
		currency: "USD",
		coverage: ["US"],
		icon: "üá∫",
		popular: false,
		features: ["–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G", "–õ–æ–∫–∞–ª—å–Ω—ã–π IP"],
	},
	{
		id: "us_10days",
		country: "–°–®–ê",
		description: "10 –¥–Ω–µ–π, 12 –ì–ë",
		price: 32,
		currency: "USD",
		coverage: ["US", "CA"],
		icon: "üá∫",
		popular: true,
		features: [
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
		],
	},
	{
		id: "us_20days",
		country: "–°–®–ê",
		description: "20 –¥–Ω–µ–π, 25 –ì–ë",
		price: 60,
		currency: "USD",
		coverage: ["US", "CA"],
		icon: "üá∫",
		popular: false,
		features: [
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Å–æ—Ü—Å–µ—Ç–∏",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
			"–õ–æ–∫–∞–ª—å–Ω—ã–π IP",
		],
	},
	{
		id: "asia_10days",
		country: "–ê–∑–∏—è",
		description: "10 –¥–Ω–µ–π, 15 –ì–ë",
		price: 35,
		currency: "USD",
		coverage: ["TH", "VN", "ID", "MY", "SG"],
		icon: "üåè",
		popular: true,
		features: [
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
		],
	},
	{
		id: "asia_7days",
		country: "–ê–∑–∏—è",
		description: "7 –¥–Ω–µ–π, 10 –ì–ë",
		price: 22,
		currency: "USD",
		coverage: ["TH", "VN", "ID", "MY", "SG", "JP", "KR"],
		icon: "üåè",
		popular: false,
		features: ["–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G"],
	},
	{
		id: "asia_20days",
		country: "–ê–∑–∏—è",
		description: "20 –¥–Ω–µ–π, 30 –ì–ë",
		price: 55,
		currency: "USD",
		coverage: ["TH", "VN", "ID", "MY", "SG", "JP", "KR", "TW", "PH"],
		icon: "üåè",
		popular: false,
		features: [
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Å–æ—Ü—Å–µ—Ç–∏",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
			"–õ–æ–∫–∞–ª—å–Ω—ã–π IP",
		],
	},
	{
		id: "world_15days",
		country: "–ú–∏—Ä",
		description: "15 –¥–Ω–µ–π, 20 –ì–ë",
		price: 50,
		currency: "USD",
		coverage: ["Global"],
		icon: "üåç",
		popular: false,
		features: [
			"–ü–æ–∫—Ä—ã—Ç–∏–µ 200+ —Å—Ç—Ä–∞–Ω",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
		],
	},
	{
		id: "world_30days",
		country: "–ú–∏—Ä",
		description: "30 –¥–Ω–µ–π, 40 –ì–ë",
		price: 85,
		currency: "USD",
		coverage: ["Global"],
		icon: "üåç",
		popular: true,
		features: [
			"–ü–æ–∫—Ä—ã—Ç–∏–µ 210+ —Å—Ç—Ä–∞–Ω",
			"–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã",
			"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è",
			"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G",
		],
	},
];

// Mock data for countries
const mockCountries = [
	{
		id: "eu",
		name: "–ï–≤—Ä–æ–ø–∞",
		flag: "üá™",
		description: "25+ —Å—Ç—Ä–∞–Ω",
		popular: true,
		color: "#3498db",
	},
	{
		id: "us",
		name: "–°–®–ê",
		flag: "üá∫",
		description: "–°–®–ê –∏ –ö–∞–Ω–∞–¥–∞",
		popular: true,
		color: "#e74c3c",
	},
	{
		id: "asia",
		name: "–ê–∑–∏—è",
		flag: "üåè",
		description: "20+ —Å—Ç—Ä–∞–Ω",
		popular: true,
		color: "#f39c12",
	},
	{
		id: "world",
		name: "–ú–∏—Ä",
		flag: "üåç",
		description: "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
		popular: false,
		color: "#9b59b6",
	},
];

// Generic helper function to send or edit messages
async function sendOrEdit(
	client: TelegramClient,
	chatId: number,
	text: string,
	keyboard: InlineKeyboardMarkup,
	messageId?: number,
): Promise<any> {
	const payload = {
		chat_id: chatId,
		text,
		reply_markup: keyboard,
		parse_mode: "MarkdownV2" as const,
	};

	if (messageId) {
		return client.editMessageText({ ...payload, message_id: messageId });
	} else {
		return client.sendMessage(payload);
	}
}

// Helper function to get next plan index (with wrap-around)
function getNextPlanIndex(currentIndex: number, totalPlans: number): number {
	if (currentIndex >= totalPlans - 1) {
		return 0; // Wrap to first plan
	}
	return currentIndex + 1;
}

// Helper function to get previous plan index (with wrap-around)
function getPrevPlanIndex(currentIndex: number, totalPlans: number): number {
	if (currentIndex <= 0) {
		return totalPlans - 1; // Wrap to last plan
	}
	return currentIndex - 1;
}

// Main menu view with enhanced UI
export const showMainMenu = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const msg = new MessageBuilder()
		.addTitle("üåê eSIM Travel", "‚úà")
		.newLine(2)
		.addInfo("–ù–∞–π–¥–∏—Ç–µ –∏ –∫—É–ø–∏—Ç–µ eSIM-–∫–∞—Ä—Ç—É –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É.")
		.newLine(2)
		.addSuccess(
			"–ù–∞—à–∏ eSIM –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤ –±–æ–ª–µ–µ —á–µ–º 200 —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞!",
		)
		.newLine(2)
		.addSectionTitle("–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", "üìã")
		.newLine()
		.addListItem("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å eSIM-–∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", "üåç")
		.newLine()
		.addListItem("–í—ã–±—Ä–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã", "üí≥")
		.newLine(2)
		.addSeparator()
		.newLine();
	// Create buttons for countries with better UI
	const countryButtons = mockCountries.map((country) => [
		{
			text: "–ö–∞—Ç–∞–ª–æ–≥ eSIM",
			callback_data: "show_esim_catalog",
		},
	]);

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "üåç –ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
			[{ text: "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data: "my_orders" }],
			[{ text: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
			[{ text: "i –ü–æ–º–æ—â—å", callback_data: "help" }],
		],
	};

	return sendOrEdit(client, chatId, msg.build(), keyboard, messageId);
};

// eSIM catalog view with enhanced UI
export const showESimCatalog = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const text = new MessageBuilder()
		.addTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", "üåç")
		.newLine(2)
		.addInfo("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–µ–∑–¥–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ eSIM-–∫–∞—Ä—Ç—ã:")
		.newLine(2)
		.addSeparator()
		.newLine();

	// Create detailed information for each country
	mockCountries.forEach((country) => {
		text
			.addSectionTitle(`${country.flag} ${country.name}`, "")
			.newLine()
			.addListItem(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${country.description}`, "üì∂")
			.newLine()
			.addListItem(
				`–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${country.popular ? "–í—ã—Å–æ–∫–∞—è" : "–°—Ä–µ–¥–Ω—è—è"}`,
				country.popular ? "üî•" : "‚≠ê",
			)
			.newLine(2);
	});

	// Create buttons for countries with better UI
	const countryButtons = mockCountries.map((country) => [
		{
			text: `${country.flag} ${country.name} | ${country.description}`,
			callback_data: `select_country_${country.id}`,
		},
	]);

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			...countryButtons,
			[
				{
					text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
					callback_data: "show_popular_plans",
				},
			],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced popular plans view
export const showPopularPlans = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const popularPlans = mockESimPlans.filter((p) => p.popular);

	const text = new MessageBuilder()
		.addTitle("‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ eSIM-–ø–ª–∞–Ω—ã", "üî•")
		.newLine(2)
		.addInfo("–°–∞–º—ã–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã —É –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
		.newLine()
		.addSeparator()
		.newLine();

	popularPlans.forEach((plan, index) => {
		text
			.addSectionTitle(`${plan.icon} ${plan.country}`, "")
			.newLine()
			.addListItem(`${plan.description}`, "üì±")
			.newLine()
			.addPrice(plan.price, plan.currency)
			.newLine()
			.addListItem(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${plan.coverage.join(", ")}`, "üì°")
			.newLine();

		// Add special features
		if (plan.features && plan.features.length > 0) {
			text.addListItem(`–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:`, "‚ú®").newLine();
			plan.features.forEach((feature) => {
				text.addListItem(`${feature}`, "‚Ä¢").newLine();
			});
		}

		text.newLine(2);
	});

	const planButtons = popularPlans.map((plan) => [
		{
			text: `${plan.icon} ${plan.country} - ${plan.price}`,
			callback_data: `select_plan_${plan.id}`,
		},
	]);

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			...planButtons,
			[{ text: "–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã", callback_data: "show_esim_catalog" }],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced country-specific eSIM options view with navigation
export const showCountryESimOptions = async (
	client: TelegramClient,
	chatId: number,
	countryId: string,
	messageId?: number,
	newIndex?: number,
) => {
	const country = mockCountries.find((c) => c.id === countryId);
	if (!country) {
		return showESimCatalog(client, chatId, messageId);
	}

	const plans = mockESimPlans.filter((p) =>
		p.country.toLowerCase().includes(country.name.toLowerCase()),
	);

	if (plans.length === 0) {
		return showESimCatalog(client, chatId, messageId);
	}

	// Get current plan index from conversation state, default to 0
	const currentState = getConversationState(chatId);
	let currentPlanIndex = currentState?.planIndex ?? 0;

	// If a new index is provided via navigation, use that
	if (newIndex !== undefined) {
		// Handle navigation based on the new index
		if (newIndex < 0) {
			// Go to previous with wrap-around
			currentPlanIndex = getPrevPlanIndex(currentPlanIndex, plans.length);
		} else if (newIndex >= plans.length) {
			// Go to next with wrap-around
			currentPlanIndex = getNextPlanIndex(currentPlanIndex, plans.length);
		} else {
			// Use the provided index
			currentPlanIndex = newIndex;
		}
	}

	// Ensure the index is within bounds
	if (currentPlanIndex >= plans.length) {
		currentPlanIndex = 0;
	} else if (currentPlanIndex < 0) {
		currentPlanIndex = plans.length - 1;
	}

	// Get the current plan to display
	const currentPlan = plans[currentPlanIndex];

	const text = new MessageBuilder()
		.addTitle(`${country.flag} ${country.name}`, "")
		.newLine()
		.addInfo(`–ü–ª–∞–Ω ${currentPlanIndex + 1} –∏–∑ ${plans.length}`)
		.newLine(2)
		.addSectionTitle(`${currentPlan.icon} ${currentPlan.description}`, "")
		.newLine()
		.addPrice(currentPlan.price, currentPlan.currency)
		.newLine()
		.addListItem(`–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${currentPlan.description.split(",")[0]}`, "‚è±")
		.newLine()
		.addListItem(`–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: ${currentPlan.description.split(",")[1]}`, "üì∂")
		.newLine()
		.addListItem(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${currentPlan.coverage.join(", ")}`, "üì°")
		.newLine();

	// Add special features
	if (currentPlan.features && currentPlan.features.length > 0) {
		text.addListItem(`–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:`, "‚ú®").newLine();
		currentPlan.features.forEach((feature) => {
			text.addListItem(`${feature}`, "‚Ä¢").newLine();
		});
	}

	text.newLine(2);

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[
				{
					text: "‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
					callback_data: `prev_plan_${countryId}_${currentPlanIndex}`,
				},
				{
					text: "‚û° –°–ª–µ–¥—É—é—â–∏–π",
					callback_data: `next_plan_${countryId}_${currentPlanIndex}`,
				},
			],
			[
				{
					text: "‚ûï –°—Ä–∞–≤–Ω–∏—Ç—å",
					callback_data: `add_to_compare_${currentPlan.id}`,
				},
			],
			[
				{
					text: `üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ${currentPlan.price}`,
					callback_data: `select_plan_${currentPlan.id}`,
				},
			],
			[{ text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
			[
				{ text: "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω", callback_data: "show_esim_catalog" },
				{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "show_esim_catalog" },
			],
		],
	};

	// Update conversation state with current plan index
	setConversationState(chatId, {
		...currentState,
		selectedCountry: countryId,
		planIndex: currentPlanIndex,
	});

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced plan details view
export const showPlanDetails = async (
	client: TelegramClient,
	chatId: number,
	planId: string,
	messageId?: number,
) => {
	const plan = mockESimPlans.find((p) => p.id === planId);
	if (!plan) {
		return showESimCatalog(client, chatId, messageId);
	}

	const text = new MessageBuilder()
		.addTitle(`${plan.country}`, plan.icon)
		.newLine(2)
		.addPrice(plan.price, plan.currency)
		.newLine(2)
		.addSectionTitle("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "üìã")
		.newLine()
		.addListItem(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.description.split(",")[0]}`, "‚è±")
		.newLine()
		.addListItem(`–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: ${plan.description.split(",")[1]}`, "üìä")
		.newLine()
		.addListItem(`–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G`, "üì°")
		.newLine(2)
		.addSectionTitle("–ü–æ–∫—Ä—ã—Ç–∏–µ", "üåç")
		.newLine()
		.addText(plan.coverage.join(", "))
		.newLine(2)
		.addSectionTitle("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞", "‚ú®")
		.newLine();

	plan.features.forEach((feature) => {
		text.addListItem(feature, "‚úÖ").newLine();
	});

	text
		.newLine(2)
		.addSectionTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "i")
		.newLine()
		.addSuccess("–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
		.newLine()
		.addInfo("–ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã")
		.newLine()
		.addInfo("–†–∞–±–æ—Ç–∞–µ—Ç —Å iPhone 11+, Samsung S20+ –∏ –¥—Ä—É–≥–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")
		.newLine(2)
		.addWarning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π")
		.newLine(2)
		.addText("‚úÖ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø–ª–∞–Ω?")
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[
				{
					text: `–ö—É–ø–∏—Ç—å –∑–∞ ${plan.price} ${plan.currency}`,
					callback_data: "purchase_plan",
				},
			],
			[{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± eSIM", callback_data: "show_esim_info" }],
			[
				{
					text: "‚¨Ö –ù–∞–∑–∞–¥",
					callback_data: `select_country_${plan.country.toLowerCase().split(" ")[0]}`,
				},
			],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced checkout view
export const showCheckout = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const text = new MessageBuilder()
		.addTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏", "üí≥")
		.newLine(2)
		.addSuccess("–í–∞—à–∞ eSIM-–∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
		.newLine(2)
		.addInfo("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ Telegram.")
		.newLine(2)
		.addWarning("–í –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ—Ç —à–∞–≥ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã.")
		.newLine(2)
		.addSeparator()
		.newLine()
		.addText("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:")
		.newLine()
		.addListItem("QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM", "‚úÖ")
		.newLine()
		.addListItem("–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "‚úÖ")
		.newLine()
		.addListItem("–¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7", "‚úÖ")
		.newLine(2)
		.addInfo(
			"–ü–æ–¥—Å–∫–∞–∑–∫–∞: eSIM –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏",
		)
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data: "purchase_plan" }],
			[{ text: "i –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å eSIM", callback_data: "show_esim_info" }],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "show_esim_catalog" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// New purchase confirmation view
export const showPurchaseConfirmation = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const mockOrder = {
		id: `ord-${Math.floor(10000 + Math.random() * 90000)}`,
		date: new Date().toISOString().split("T")[0],
		plan: "–ï–≤—Ä–æ–ø–∞, 7 –¥–Ω–µ–π",
		status: "–ê–∫—Ç–∏–≤–Ω–∞",
		activationCode: "esim" + Math.random().toString(36).substring(2, 10),
	};

	const text = new MessageBuilder()
		.addTitle("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", "üéâ")
		.newLine(2)
		.addSuccess("–í–∞—à–∞ eSIM-–∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
		.newLine(2)
		.addSectionTitle("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", "üìã")
		.newLine()
		.addListItem(`ID –∑–∞–∫–∞–∑–∞: ${mockOrder.id}`, "üÜî")
		.newLine()
		.addListItem(`–¢–∞—Ä–∏—Ñ: ${mockOrder.plan}`, "üì±")
		.newLine()
		.addListItem(`–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${mockOrder.date}`, "üìÖ")
		.newLine()
		.addListItem(`–°—Ç–∞—Ç—É—Å: ${mockOrder.status}`, "‚úÖ")
		.newLine(2)
		.addSectionTitle("–ê–∫—Ç–∏–≤–∞—Ü–∏—è eSIM", "‚öô")
		.newLine()
		.addInfo("1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
		.newLine()
		.addInfo("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª eSIM –∏–ª–∏ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
		.newLine()
		.addInfo("3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å eSIM' –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥")
		.newLine()
		.addInfo("4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
		.newLine(2)
		.addWarning("–ù–µ —É–¥–∞–ª—è–π—Ç–µ eSIM –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏")
		.newLine(2)
		.addInfo(
			"–ü–æ–¥—Å–∫–∞–∑–∫–∞: eSIM –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏",
		)
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[
				{
					text: "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
					callback_data: "esim_settings_help",
				},
			],
			[{ text: "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data: "my_orders" }],
			[{ text: "–ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
			[{ text: "i –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "help" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced my orders view
export const showMyOrders = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	// Mock orders data for PoC
	const mockOrders = [
		{
			id: "ord-12345",
			plan: "–ï–≤—Ä–æ–ø–∞, 7 –¥–Ω–µ–π",
			status: "–ó–∞–≤–µ—Ä—à–µ–Ω",
			date: "2023-10-15",
			icon: "‚úÖ",
		},
		{
			id: "ord-12346",
			plan: "–°–®–ê, 5 –¥–Ω–µ–π",
			status: "–ó–∞–≤–µ—Ä—à–µ–Ω",
			date: "2023-11-02",
			icon: "‚úÖ",
		},
		{
			id: "ord-12347",
			plan: "–Ø–ø–æ–Ω–∏—è, 14 –¥–Ω–µ–π",
			status: "–ê–∫—Ç–∏–≤–Ω–∞",
			date: "2023-11-20",
			icon: "üü¢",
		},
		{
			id: "ord-12348",
			plan: "–ê–∑–∏—è, 10 –¥–Ω–µ–π",
			status: "–ê–∫—Ç–∏–≤–Ω–∞",
			date: "2023-12-05",
			icon: "üü¢",
		},
	];

	const text = new MessageBuilder()
		.addTitle("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üì¶")
		.newLine(2)
		.addInfo("–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã eSIM-–∫–∞—Ä—Ç:")
		.newLine(2)
		.addSeparator()
		.newLine();

	mockOrders.forEach((order, index) => {
		text
			.addListItem(`${order.plan} | ${order.status}`, order.icon)
			.newLine()
			.addText(`–î–∞—Ç–∞: ${order.date} | ID: ${order.id}`)
			.newLine(2);
	});

	text
		.addInfo("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "repeat_order" }],
			[{ text: "–ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
			[{ text: "i –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data: "help" }],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced help view
export const showHelp = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const text = new MessageBuilder()
		.addTitle("i –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "ü§ù")
		.newLine(2)
		.addInfo(
			"eSIM Travel - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM-–∫–∞—Ä—Ç –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
		)
		.newLine(2)
		.addSectionTitle("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:", "üìã")
		.newLine()
		.addNumberedItem("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–µ–∑–¥–∫–∏", 1)
		.newLine()
		.addNumberedItem("–ü–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ", 2)
		.newLine()
		.addNumberedItem("–û–ø–ª–∞—Ç–∏—Ç–µ eSIM", 3)
		.newLine()
		.addNumberedItem("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", 4)
		.newLine(2)
		.addSectionTitle("–ß—Ç–æ —Ç–∞–∫–æ–µ eSIM?", "‚ùì")
		.newLine()
		.addText(
			"eSIM - —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ç—è–º —Å–≤—è–∑–∏ –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã.",
		)
		.newLine(2)
		.addSuccess("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ eSIM:")
		.newLine()
		.addListItem("–ë—ã—Å—Ç—Ä–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã", "‚úÖ")
		.newLine()
		.addListItem("–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "‚úÖ")
		.newLine()
		.addListItem("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª–µ–µ —á–µ–º 200 —Å—Ç—Ä–∞–Ω", "‚úÖ")
		.newLine()
		.addListItem("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", "‚úÖ")
		.newLine(2)
		.addSectionTitle("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "‚ùì")
		.newLine()
		.addListItem("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏", "üì±")
		.newLine()
		.addListItem("–ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", "‚öô")
		.newLine()
		.addListItem("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ eSIM", "üîß")
		.newLine(2)
		.addInfo("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @esim_support")
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å eSIM", callback_data: "show_esim_catalog" }],
			[{ text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
			[{ text: "i –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data: "help" }],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// New eSIM info view
export const showESimInfo = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const text = new MessageBuilder()
		.addTitle("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± eSIM", "üì±")
		.newLine(2)
		.addInfo(
			"eSIM (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SIM-–∫–∞—Ä—Ç–∞) - —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è SIM-–∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.",
		)
		.newLine(2)
		.addSectionTitle("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:", "‚ú®")
		.newLine()
		.addListItem("–ë—ã—Å—Ç—Ä–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã", "‚úÖ")
		.newLine()
		.addListItem("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤", "‚úÖ")
		.newLine()
		.addListItem("–õ–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "‚úÖ")
		.newLine()
		.addListItem("–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫", "‚úÖ")
		.newLine(2)
		.addSectionTitle("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:", "üîß")
		.newLine()
		.addListItem("iPhone 11 –∏ –Ω–æ–≤–µ–µ", "üì±")
		.newLine()
		.addListItem("Samsung Galaxy S20 –∏ –Ω–æ–≤–µ–µ", "üì±")
		.newLine()
		.addListItem("Google Pixel 3 –∏ –Ω–æ–≤–µ–µ", "üì±")
		.newLine()
		.addListItem("–ú–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "üì±")
		.newLine(2)
		.addSectionTitle("–ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", "‚öô")
		.newLine()
		.addNumberedItem("–ó–∞–∫–∞–∂–∏—Ç–µ eSIM —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞", 1)
		.newLine()
		.addNumberedItem("–ü–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 2)
		.newLine()
		.addNumberedItem("–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 3)
		.newLine()
		.addNumberedItem("–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ eSIM –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", 4)
		.newLine(2)
		.addSuccess(
			"–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π eSIM –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã!",
		)
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "üåç –ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
			[{ text: "‚úÖ –ö –ø–æ–∫—É–ø–∫–µ", callback_data: "show_popular_plans" }],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Function to add a plan to comparison
export const addToComparison = async (
	client: TelegramClient,
	chatId: number,
	planId: string,
) => {
	const currentState = getConversationState(chatId);
	const plan = mockESimPlans.find((p) => p.id === planId);

	if (!plan) {
		// If plan not found, return to catalog
		return showESimCatalog(client, chatId);
	}

	// Get current comparison plans or initialize empty array
	const currentComparisonPlans = currentState?.comparisonPlans || [];

	// Check if plan is already in comparison list
	if (!currentComparisonPlans.includes(planId)) {
		// Add plan to comparison (max 2 plans for now)
		if (currentComparisonPlans.length < 2) {
			currentComparisonPlans.push(planId);
		} else {
			// Replace the second plan if 2 already exist
			currentComparisonPlans[1] = planId;
		}
	}

	// Update conversation state
	setConversationState(chatId, {
		...currentState,
		comparisonPlans: currentComparisonPlans,
	});

	// Show notification about adding to comparison
	const text = new MessageBuilder()
		.addTitle("–ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é", "‚úÖ")
		.newLine()
		.addInfo(`–ü–ª–∞–Ω "${plan.description}" –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é.`)
		.newLine(2)
		.addInfo(`–í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: ${currentComparisonPlans.length}`)
		.newLine(2);

	if (currentComparisonPlans.length === 2) {
		text.addSuccess("–ì–æ—Ç–æ–≤–æ! –£ –≤–∞—Å 2 –ø–ª–∞–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.").newLine(2);
	} else {
		text.addInfo("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –ø–ª–∞–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.").newLine(2);
	}

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "üìã –°—Ä–∞–≤–Ω–∏—Ç—å –ø–ª–∞–Ω—ã", callback_data: "start_comparison" }],
			[
				{
					text: "üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π",
					callback_data: `select_country_${plan.country.toLowerCase()}`,
				},
			],
			[
				{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data: "clear_comparison" },
				{
					text: "‚¨Ö –ù–∞–∑–∞–¥",
					callback_data: `select_country_${plan.country.toLowerCase()}`,
				},
			],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard);
};

// Function to clear the comparison list
export const clearComparison = async (
	client: TelegramClient,
	chatId: number,
) => {
	const currentState = getConversationState(chatId);

	// Update conversation state to clear comparison plans
	setConversationState(chatId, {
		...currentState,
		comparisonPlans: [],
	});

	const text = new MessageBuilder()
		.addTitle("–°–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω", "üóë")
		.newLine()
		.addInfo("–í—Å–µ –ø–ª–∞–Ω—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
		.newLine(2)
		.addInfo("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.");

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "üåç –ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
			[{ text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard);
};

// Function to show the comparison view
export const showComparisonView = async (
	client: TelegramClient,
	chatId: number,
) => {
	const currentState = getConversationState(chatId);
	const comparisonPlans = currentState?.comparisonPlans || [];

	if (comparisonPlans.length < 2) {
		// If not enough plans for comparison, redirect to add more
		const text = new MessageBuilder()
			.addTitle("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–∞–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", "!")
			.newLine()
			.addInfo("–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å 2 —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞.")
			.newLine(2)
			.addInfo(`–°–µ–π—á–∞—Å –≤ —Å–ø–∏—Å–∫–µ: ${comparisonPlans.length} –ø–ª–∞–Ω(–∞)`)
			.newLine(2);

		const keyboard: InlineKeyboardMarkup = {
			inline_keyboard: [
				[{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data: "show_esim_catalog" }],
				[
					{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data: "clear_comparison" },
					{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" },
				],
			],
		};

		return sendOrEdit(client, chatId, text.build(), keyboard);
	}

	// Get both plans for comparison
	const firstPlan = mockESimPlans.find((p) => p.id === comparisonPlans[0]);
	const secondPlan = mockESimPlans.find((p) => p.id === comparisonPlans[1]);

	if (!firstPlan || !secondPlan) {
		// If plans not found, redirect to catalog
		return showESimCatalog(client, chatId);
	}

	const text = new MessageBuilder()
		.addTitle("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤", "üìä")
		.newLine(2)
		.addSectionTitle(`${firstPlan.icon} ${firstPlan.country}`, "")
		.newLine()
		.addPrice(firstPlan.price, firstPlan.currency)
		.newLine()
		.addListItem(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${firstPlan.description.split(",")[0]}`, "‚è±")
		.newLine()
		.addListItem(`–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: ${firstPlan.description.split(",")[1]}`, "üì∂")
		.newLine()
		.addListItem(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${firstPlan.coverage.join(", ")}`, "üì°")
		.newLine();

	// Add special features for first plan
	if (firstPlan.features && firstPlan.features.length > 0) {
		text.addListItem(`–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:`, "‚ú®").newLine();
		firstPlan.features.forEach((feature) => {
			text.addListItem(`${feature}`, "‚Ä¢").newLine();
		});
	}

	text
		.addSeparator()
		.newLine()
		.addSectionTitle(`${secondPlan.icon} ${secondPlan.country}`, "")
		.newLine()
		.addPrice(secondPlan.price, secondPlan.currency)
		.newLine()
		.addListItem(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${secondPlan.description.split(",")[0]}`, "‚è±")
		.newLine()
		.addListItem(`–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: ${secondPlan.description.split(",")[1]}`, "üì∂")
		.newLine()
		.addListItem(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${secondPlan.coverage.join(", ")}`, "üì°")
		.newLine();

	// Add special features for second plan
	if (secondPlan.features && secondPlan.features.length > 0) {
		text.addListItem(`–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:`, "‚ú®").newLine();
		secondPlan.features.forEach((feature) => {
			text.addListItem(`${feature}`, "‚Ä¢").newLine();
		});
	}

	text
		.newLine(2)
		.addInfo(
			"–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–æ–≤ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥.",
		);

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[
				{
					text: `üí≥ –ó–∞–∫–∞–∑–∞—Ç—å ${firstPlan.description}`,
					callback_data: `select_plan_${firstPlan.id}`,
				},
			],
			[
				{
					text: `üí≥ –ó–∞–∫–∞–∑–∞—Ç—å ${secondPlan.description}`,
					callback_data: `select_plan_${secondPlan.id}`,
				},
			],
			[
				{ text: "üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data: "show_esim_catalog" },
				{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data: "clear_comparison" },
			],
			[{ text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
		],
	};

	return sendOrEdit(client, chatId, text.build(), keyboard);
};
