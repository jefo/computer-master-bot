import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "../infra/message-builder";
import { showProcessingMessage, updateMessageWithSuccess } from "../infra/visual-effects";

// Mock data for eSIM plans - in a real app, this would come from an API
const mockESimPlans = [
  {
    id: "eu_7days",
    country: "–ï–≤—Ä–æ–ø–∞",
    description: "7 –¥–Ω–µ–π, 10 –ì–ë",
    price: 25,
    currency: "USD",
    coverage: ["DE", "FR", "IT", "ES", "NL"],
    icon: "üá™üá∫",
    popular: true,
    features: ["–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π WhatsApp", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G"]
  },
  {
    id: "us_5days",
    country: "–°–®–ê",
    description: "5 –¥–Ω–µ–π, 5 –ì–ë",
    price: 20,
    currency: "USD",
    coverage: ["US"],
    icon: "üá∫üá∏",
    popular: false,
    features: ["–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G", "–õ–æ–∫–∞–ª—å–Ω—ã–π IP"]
  },
  {
    id: "asia_10days",
    country: "–ê–∑–∏—è",
    description: "10 –¥–Ω–µ–π, 15 –ì–ë",
    price: 35,
    currency: "USD",
    coverage: ["TH", "VN", "ID", "MY", "SG"],
    icon: "üåè",
    popular: true,
    features: ["–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G"]
  },
  {
    id: "world_15days",
    country: "–ú–∏—Ä",
    description: "15 –¥–Ω–µ–π, 20 –ì–ë",
    price: 50,
    currency: "USD",
    coverage: ["Global"],
    icon: "üåç",
    popular: false,
    features: ["–ü–æ–∫—Ä—ã—Ç–∏–µ 200+ —Å—Ç—Ä–∞–Ω", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4G/5G"]
  }
];

// Mock data for countries
const mockCountries = [
  { id: "eu", name: "–ï–≤—Ä–æ–ø–∞", flag: "üá™üá∫", description: "25+ —Å—Ç—Ä–∞–Ω", popular: true, color: "#3498db" },
  { id: "us", name: "–°–®–ê", flag: "üá∫üá∏", description: "–°–®–ê –∏ –ö–∞–Ω–∞–¥–∞", popular: false, color: "#e74c3c" },
  { id: "asia", name: "–ê–∑–∏—è", flag: "üåè", description: "20+ —Å—Ç—Ä–∞–Ω", popular: true, color: "#f39c12" },
  { id: "world", name: "–ú–∏—Ä", flag: "üåç", description: "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ", popular: false, color: "#9b59b6" }
];

// Generic helper function to send or edit messages
async function sendOrEdit(
  client: TelegramClient,
  chatId: number, 
  text: string, 
  keyboard: InlineKeyboardMarkup, 
  messageId?: number
): Promise<any> {
  const payload = { 
    chat_id: chatId, 
    text, 
    reply_markup: keyboard, 
    parse_mode: "MarkdownV2" as const 
  };
  
  if (messageId) {
    return await client.editMessageText({ ...payload, message_id: messageId });
  } else {
    return await client.sendMessage(payload);
  }
}

// Main menu view with enhanced UI
export const showMainMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const text = new MessageBuilder()
    .addTitle("üåê eSIM Travel", "‚úàÔ∏è")
    .newLine(2)
    .addInfo("–ù–∞–π–¥–∏—Ç–µ –∏ –∫—É–ø–∏—Ç–µ eSIM-–∫–∞—Ä—Ç—É –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É.")
    .newLine(2)
    .addText("–ù–∞—à–∏ eSIM –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤ –±–æ–ª–µ–µ —á–µ–º 200 —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞!")
    .newLine(2)
    .addSeparator()
    .addText("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?")
    .build();
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [{ text: "üåç –ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
      [{ text: "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data: "my_orders" }],
      [{ text: "üí≥ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
      [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text, keyboard, messageId);
};

// eSIM catalog view with enhanced UI
export const showESimCatalog = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const text = new MessageBuilder()
    .addTitle("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", "üó∫Ô∏è")
    .newLine(2)
    .addInfo("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–µ–∑–¥–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ eSIM-–∫–∞—Ä—Ç—ã:")
    .newLine(2)
    .addSeparator()
    .build();
  
  // Create buttons for countries with better UI
  const countryButtons = mockCountries.map(country => [
    { 
      text: `${country.flag} ${country.name} | ${country.description}`, 
      callback_data: `select_country_${country.id}` 
    }
  ]);
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      ...countryButtons,
      [{ text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data: "show_popular_plans" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–†–µ–≥–∏–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced popular plans view
export const showPopularPlans = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const popularPlans = mockESimPlans.filter(p => p.popular);
  
  const text = new MessageBuilder()
    .addTitle("‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ eSIM-–ø–ª–∞–Ω—ã", "üî•")
    .newLine(2)
    .addInfo("–°–∞–º—ã–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã —É –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    .newLine()
    .addSeparator()
    .newLine();
  
  popularPlans.forEach((plan, index) => {
    text
      .addNumberedItem(`${plan.icon} ${plan.country} - ${plan.description}`, index + 1)
      .newLine()
      .addPrice(plan.price, plan.currency)
      .newLine(2);
  });
  
  const planButtons = popularPlans.map(plan => [
    {
      text: `${plan.icon} ${plan.country} - ${plan.price} ${plan.currency}`, 
      callback_data: `select_plan_${plan.id}`
    }
  ]);
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      ...planButtons,
      [{ text: "üåç –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã", callback_data: "show_esim_catalog" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced country-specific eSIM options view
export const showCountryESimOptions = async (
  client: TelegramClient, 
  chatId: number, 
  countryId: string, 
  messageId?: number
) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ü–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const country = mockCountries.find(c => c.id === countryId);
  if (!country) {
    return showESimCatalog(client, chatId, messageId);
  }
  
  const plans = mockESimPlans.filter(p => p.country.toLowerCase().includes(country.name.toLowerCase()));
  
  const text = new MessageBuilder()
    .addTitle(`üì± eSIM-–∫–∞—Ä—Ç—ã –¥–ª—è ${country.name}`, country.flag)
    .newLine(2)
    .addInfo(`–î–æ—Å—Ç—É–ø–Ω–æ ${plans.length} —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤:`)
    .newLine(2)
    .addSeparator()
    .newLine();
  
  plans.forEach((plan, index) => {
    text
      .addNumberedItem(`${plan.description}`, index + 1)
      .newLine()
      .addPrice(plan.price, plan.currency)
      .newLine(2);
  });
  
  // Create buttons for each plan with visual improvements
  const planButtons = plans.map(plan => [
    {
      text: `${plan.icon} ${plan.description} - üí≥${plan.price}`, 
      callback_data: `select_plan_${plan.id}`
    }
  ]);
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      ...planButtons,
      [{ text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
      [{ text: "üåç –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω", callback_data: "show_esim_catalog" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "show_esim_catalog" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–¢–∞—Ä–∏—Ñ—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced plan details view
export const showPlanDetails = async (
  client: TelegramClient, 
  chatId: number, 
  planId: string, 
  messageId?: number
) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–∞—Ä–∏—Ñ–∞...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const plan = mockESimPlans.find(p => p.id === planId);
  if (!plan) {
    return showESimCatalog(client, chatId, messageId);
  }
  
  const text = new MessageBuilder()
    .addTitle(`üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: ${plan.country}`, plan.icon)
    .newLine(2)
    .addSectionTitle("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "‚öôÔ∏è")
    .newLine()
    .addListItem(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.description.split(',')[1]}`, "‚Ä¢")
    .newLine()
    .addListItem(`üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: ${plan.description.split(',')[0]}`, "‚Ä¢")
    .newLine()
    .addListItem(`üí≥ –¶–µ–Ω–∞: ${plan.price} ${plan.currency}`, "‚Ä¢")
    .newLine(2)
    .addSectionTitle("–ü–æ–∫—Ä—ã—Ç–∏–µ", "üì°")
    .newLine()
    .addText(plan.coverage.join(", "))
    .newLine(2)
    .addSectionTitle("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞", "‚ú®")
    .newLine();
    
  plan.features.forEach(feature => {
    text.addListItem(feature, "‚úÖ").newLine();
  });
  
  text
    .newLine()
    .addSuccess("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    .newLine()
    .addInfo("‚ÑπÔ∏è –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã")
    .newLine(2)
    .addText("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø–ª–∞–Ω?")
    .build();
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [{ text: `üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ${plan.price} ${plan.currency}`, callback_data: "purchase_plan" }],
      [{ text: "‚úÖ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± eSIM", callback_data: "show_esim_info" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `select_country_${plan.country.toLowerCase().split(' ')[0]}` }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–î–µ—Ç–∞–ª–∏ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced checkout view
export const showCheckout = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const text = new MessageBuilder()
    .addTitle("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏", "üí≥")
    .newLine(2)
    .addSuccess("–í–∞—à–∞ eSIM-–∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
    .newLine(2)
    .addInfo("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ Telegram.")
    .newLine(2)
    .addWarning("‚ö†Ô∏è –í –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ—Ç —à–∞–≥ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã.")
    .newLine(2)
    .addSeparator()
    .newLine()
    .addText("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:")
    .newLine()
    .addListItem("QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM", "‚úÖ")
    .newLine()
    .addListItem("–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", "‚úÖ")
    .newLine()
    .addListItem("–¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7", "‚úÖ")
    .newLine(2)
    .addInfo("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: eSIM –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏")
    .build();
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data: "purchase_plan" }],
      [{ text: "‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å eSIM", callback_data: "show_esim_info" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "show_esim_catalog" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–ü–æ–∫—É–ø–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced my orders view
export const showMyOrders = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const text = new MessageBuilder()
    .addTitle("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üìã")
    .newLine(2)
    .addInfo("–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã eSIM-–∫–∞—Ä—Ç:")
    .newLine(2)
    .addSeparator()
    .newLine()
    .addListItem("–ï–≤—Ä–æ–ø–∞, 7 –¥–Ω–µ–π | –ó–∞–≤–µ—Ä—à–µ–Ω", "‚úÖ")
    .newLine()
    .addListItem("–°–®–ê, 5 –¥–Ω–µ–π | –ó–∞–≤–µ—Ä—à–µ–Ω", "‚úÖ")
    .newLine()
    .addListItem("–Ø–ø–æ–Ω–∏—è, 14 –¥–Ω–µ–π | –ê–∫—Ç–∏–≤–Ω–∞", "üü¢")
    .newLine(2)
    .addInfo("üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
    .build();
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [{ text: "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "repeat_order" }],
      [{ text: "üåç –ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
      [{ text: "‚ÑπÔ∏è –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data: "help" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// Enhanced help view
export const showHelp = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–∫–∏...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const text = new MessageBuilder()
    .addTitle("‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "ü§ù")
    .newLine(2)
    .addText("eSIM Travel - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM-–∫–∞—Ä—Ç –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.")
    .newLine(2)
    .addSectionTitle("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:", "üìã")
    .newLine()
    .addNumberedItem("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–µ–∑–¥–∫–∏", 1)
    .newLine()
    .addNumberedItem("–ü–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ", 2)
    .newLine()
    .addNumberedItem("–û–ø–ª–∞—Ç–∏—Ç–µ eSIM", 3)
    .newLine()
    .addNumberedItem("–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", 4)
    .newLine(2)
    .addSectionTitle("–ß—Ç–æ —Ç–∞–∫–æ–µ eSIM?", "‚ùì")
    .newLine()
    .addText("eSIM - —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ç—è–º —Å–≤—è–∑–∏ –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã.")
    .newLine(2)
    .addSuccess("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ eSIM:")
    .newLine()
    .addListItem("‚úì –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç–µ", "‚Ä¢")
    .newLine()
    .addListItem("‚úì –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", "‚Ä¢")
    .newLine()
    .addListItem("‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª–µ–µ —á–µ–º 200 —Å—Ç—Ä–∞–Ω", "‚Ä¢")
    .newLine()
    .addListItem("‚úì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", "‚Ä¢")
    .newLine(2)
    .addInfo("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @esim_support")
    .build();
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [{ text: "üåç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å eSIM", callback_data: "show_esim_catalog" }],
      [{ text: "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data: "show_popular_plans" }],
      [{ text: "‚ÑπÔ∏è –¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data: "help" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–°–ø—Ä–∞–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};

// New eSIM info view
export const showESimInfo = async (client: TelegramClient, chatId: number, messageId?: number) => {
  // Show processing animation
  const processingMsgId = await showProcessingMessage(client, chatId, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± eSIM...");
  
  // Simulate loading time for visual effect
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const text = new MessageBuilder()
    .addTitle("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± eSIM", "üì±")
    .newLine(2)
    .addText("eSIM (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SIM-–∫–∞—Ä—Ç–∞) - —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è SIM-–∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    .newLine(2)
    .addSectionTitle("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:", "‚ú®")
    .newLine()
    .addListItem("–ë—ã—Å—Ç—Ä–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π SIM-–∫–∞—Ä—Ç—ã", "‚úÖ")
    .newLine()
    .addListItem("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤", "‚úÖ")
    .newLine()
    .addListItem("–õ–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "‚úÖ")
    .newLine()
    .addListItem("–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫", "‚úÖ")
    .newLine(2)
    .addSectionTitle("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:", "üîß")
    .newLine()
    .addListItem("iPhone 11 –∏ –Ω–æ–≤–µ–µ", "üì±")
    .newLine()
    .addListItem("Samsung Galaxy S20 –∏ –Ω–æ–≤–µ–µ", "üì±")
    .newLine()
    .addListItem("Google Pixel 3 –∏ –Ω–æ–≤–µ–µ", "üì±")
    .newLine()
    .addListItem("–ú–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "üì±")
    .newLine(2)
    .addInfo("–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π eSIM –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã!")
    .build();
  
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [{ text: "üåç –ö–∞—Ç–∞–ª–æ–≥ eSIM", callback_data: "show_esim_catalog" }],
      [{ text: "‚úÖ –ö –ø–æ–∫—É–ø–∫–µ", callback_data: "show_popular_plans" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
    ]
  };
  
  // Update with success message
  await updateMessageWithSuccess(client, chatId, processingMsgId, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± eSIM –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
  
  // Wait a moment to show the success indicator
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return sendOrEdit(client, chatId, text.build(), keyboard, messageId);
};