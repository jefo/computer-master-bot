import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup, Message } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "../infra/message-builder";

// --- Generic Helper ---
async function sendOrEdit(client: TelegramClient, chatId: number, text: string, keyboard: InlineKeyboardMarkup, messageId?: number): Promise<Message> {
    const payload = { chat_id: chatId, text, reply_markup: keyboard, parse_mode: "MarkdownV2" as const };
    if (messageId) {
        try {
            const result = await client.editMessageText({ ...payload, message_id: messageId });
            // editMessageText can return true, so we construct a mock Message for consistency
            return typeof result === 'boolean' ? { message_id: messageId, chat: { id: chatId }, date: Date.now() } : result;
        } catch (e) {
            // If message is not modified, Telegram throws an error. We can safely ignore it.
            console.warn(`Could not edit message: ${e}`);
            return { message_id: messageId, chat: { id: chatId }, date: Date.now() };
        }
    } else {
        return await client.sendMessage(payload);
    }
}

import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup, Message } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "../infra/message-builder";

// --- Generic Helper ---
async function sendOrEdit(client: TelegramClient, chatId: number, text: string, keyboard: InlineKeyboardMarkup, messageId?: number): Promise<Message> {
    const payload = { chat_id: chatId, text, reply_markup: keyboard, parse_mode: "MarkdownV2" as const };
    if (messageId) {
        try {
            const result = await client.editMessageText({ ...payload, message_id: messageId });
            // editMessageText can return true, so we construct a mock Message for consistency
            return typeof result === 'boolean' ? { message_id: messageId, chat: { id: chatId }, date: Date.now() } : result;
        } catch (e) {
            // If message is not modified, Telegram throws an error. We can safely ignore it.
            console.warn(`Could not edit message: ${e}`);
            return { message_id: messageId, chat: { id: chatId }, date: Date.now() };
        }
    } else {
        return await client.sendMessage(payload);
    }
}


export const showRoleSelectionMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addTitle("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HIRE-–±–æ—Ç!")
        .newLine(2)
        .addText("–≠—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")
        .newLine(2)
        .addBold("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:")
        .build();

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üë§ –Ø –ö–ª–∏–µ–Ω—Ç (–∏—â—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)", callback_data: "role_client" }],
            [{ text: "üõ†Ô∏è –Ø –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–∏—â—É —Ä–∞–±–æ—Ç—É)", callback_data: "role_specialist" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}; 

// --- Placeholder welcome messages ---

export const showClientWelcome = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder()
        .addText("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: ")
        .addBold("–ö–ª–∏–µ–Ω—Ç")
        .newLine(2)
        .addText("–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        .addText(" (—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏", callback_data: "back_to_role_selection" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showSpecialistWelcome = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder()
        .addText("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: ")
        .addBold("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
        .newLine(2)
        .addText("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile_start" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏", callback_data: "back_to_role_selection" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

// --- Profile Creation Form ---

export const showProfileForm = async (client: TelegramClient, chatId: number, profileData: any, editingField?: string, messageId?: number) => {
    const nameStatus = profileData.name ? '‚úÖ' : '‚òëÔ∏è';
    const nameIndicator = editingField === 'name' ? 'üëâ' : '';
    const nameValue = profileData.name || '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ';

    const text = new MessageBuilder()
        .addTitle("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        .newLine(2)
        .addText(`${nameStatus} –ò–º—è: ${nameValue} ${nameIndicator}`)
        .newLine()
        // ... other fields will be added here
        .build();

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: `${nameStatus} –ò–º—è`, callback_data: "edit_profile_name" }],
            // ... other edit buttons will be added here
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_specialist_welcome" }],
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

