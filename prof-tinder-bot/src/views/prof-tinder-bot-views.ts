import type { TelegramClient } from "packages/telegram-client";
import type { InlineKeyboardMarkup, Message } from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "../infra/message-builder";
import { MOCK_ORDERS, MOCK_SPECIALISTS, MOCK_CLIENTS } from "../app/mock-data";

// --- Generic Helper ---
async function sendOrEdit(client: TelegramClient, chatId: number, text: string, keyboard: InlineKeyboardMarkup, messageId?: number): Promise<Message> {
    const payload = { chat_id: chatId, text, reply_markup: keyboard, parse_mode: "MarkdownV2" as const };
    if (messageId) {
        try {
            // Important: Edit message requires the new text to be different from the old one.
            const result = await client.editMessageText({ ...payload, message_id: messageId });
            return typeof result === 'boolean' ? { message_id: messageId, chat: { id: chatId }, date: Date.now() } : result;
        } catch (e) {
            console.warn(`Could not edit message: ${e}. Sending a new one.`);
            return await client.sendMessage(payload);
        }
    } else {
        return await client.sendMessage(payload);
    }
}

// --- Main Demo Flow ---

export const showHookScreen = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addText("–í—ã ‚Äî –∑–∞–∫–∞–∑—á–∏–∫, –∏—â—É—â–∏–π UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
        .newLine(2)
        .addText("–ë–æ—Ç –ø–æ–¥–±–µ—Ä–µ—Ç –¥–ª—è –≤–∞—Å –ª—É—á—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Tinder'.")
        .newLine(2)
        .addBold("–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.")
        .build();

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üöÄ –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä", callback_data: "start_matching" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showDemoConclusion = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder()
        .addText("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        .newLine()
        .addText("–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º'.")
        .newLine(2)
        .addBold("–¢–∞–∫ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.")
        .build();

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [
                { text: "‚≠ê –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: "client_view_favorites" },
                { text: "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä", callback_data: "start_matching" },
            ],
            [{ text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showMainMenu = async (client: TelegramClient, chatId: number, messageId?: number) => {
    const text = new MessageBuilder()
        .addTitle("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        .newLine(2)
        .addText("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å.")
        .build();

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üë§ –Ø –ö–ª–∏–µ–Ω—Ç (–∏—â—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)", callback_data: "role_client" }],
            [{ text: "üõ†Ô∏è –Ø –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–∏—â—É —Ä–∞–±–æ—Ç—É)", callback_data: "role_specialist" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
};


// --- Client Flow ---

export const showClientMenu = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder()
        .addTitle("–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞")
        .newLine(2)
        .addText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üöÄ –°–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data: "client_view_specialists" }],
            [{ text: "‚≠ê –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: "client_view_favorites" }],
            [{ text: "‚öôÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "client_view_profile" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showSpecialistCard = async (client: TelegramClient, chatId: number, specialistIndex: number, messageId?: number) => {
    const specialist = MOCK_SPECIALISTS[specialistIndex];
    
    // DEMO FINALE
    if (!specialist || specialistIndex > 2) {
        return showDemoConclusion(client, chatId, messageId!)
    }

    const text = new MessageBuilder()
        .addBold(`üë§ ${specialist.name} ‚Äî ${specialist.profession}`)
        .newLine(2)
        .addText(`‚≠êÔ∏è *–û–ø—ã—Ç:* ${specialist.experience}`)
        .newLine()
        .addText(`üí≤ *–°—Ç–∞–≤–∫–∞:* ${specialist.rate}`)
        .newLine()
        .addText(`üìç *–ì–æ—Ä–æ–¥:* ${specialist.city}`)
        .newLine(2)
        .addRawText(`_${MessageBuilder.escapeMarkdownV2(specialist.about)}_`)
        .newLine(2)
        .addText(`*–ù–∞–≤—ã–∫–∏:* #${specialist.tags.join(' #')}`)
        .newLine()
        .addText(`*–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:* ${specialist.portfolio}`)
        .build();

    const nextIndex = (specialistIndex + 1);

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [
                { text: "üëç –ù–∞–ø–∏—Å–∞—Ç—å", callback_data: `contact_specialist_${specialist.id}` },
                { text: "üëé –î–∞–ª—å—à–µ", callback_data: `show_specialist_${nextIndex}` },
                { text: "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: `add_to_favorites_specialist_${specialist.id}` },
            ],
            [{ text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showClientFavorites = async (client: TelegramClient, chatId: number, favoriteSpecialistIds: string[], messageId: number) => {
    const builder = new MessageBuilder()
        .addTitle("‚≠ê –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–ö–ª–∏–µ–Ω—Ç)");

    if (!favoriteSpecialistIds || favoriteSpecialistIds.length === 0) {
        builder.newLine(2).addText("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.");
    } else {
        builder.newLine(2).addText("–í–æ—Ç –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:");
        favoriteSpecialistIds.forEach(id => {
            const specialist = MOCK_SPECIALISTS.find(s => s.id === id);
            if (specialist) {
                builder.newLine().addListItem(`${specialist.name} - ${specialist.profession}`);
            }
        });
    }

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "back_to_client_menu" }]
        ]
    };

    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
}

export const showClientProfile = async (client: TelegramClient, chatId: number, messageId: number) => {
    const clientProfile = MOCK_CLIENTS[0]; // Assuming a single mock client for now
    const text = new MessageBuilder()
        .addTitle("‚öôÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ö–ª–∏–µ–Ω—Ç)")
        .newLine(2)
        .addBold(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${clientProfile.name}`)
        .newLine()
        .addText(`–ö–æ–º–ø–∞–Ω–∏—è: ${clientProfile.company}`)
        .newLine()
        .addText(`–û —Å–µ–±–µ: ${clientProfile.description}`)
        .newLine()
        .addText(`–ö–æ–Ω—Ç–∞–∫—Ç: ${clientProfile.contactEmail}`)
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "back_to_client_menu" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

// --- Specialist Flow ---

export const showSpecialistMenu = async (client: TelegramClient, chatId: number, messageId: number) => {
    const text = new MessageBuilder()
        .addTitle("–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        .newLine(2)
        .addText("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º.")
        .newLine(2)
        .addText("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "üöÄ –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data: "specialist_view_orders" }],
            [{ text: "‚≠ê –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: "specialist_view_favorites" }],
            [{ text: "‚öôÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "specialist_view_profile" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showOrderCard = async (client: TelegramClient, chatId: number, orderIndex: number, messageId: number) => {
    const order = MOCK_ORDERS[orderIndex];
    if (!order) {
        const text = new MessageBuilder().addText("–ó–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?").build();
        const keyboard: InlineKeyboardMarkup = { inline_keyboard: [
            [{ text: "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data: `specialist_view_orders` }],
            [{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "back_to_specialist_menu" }]
        ] };
        return sendOrEdit(client, chatId, text, keyboard, messageId);
    }

    const text = new MessageBuilder()
        .addBold(order.title)
        .newLine(2)
        .addText(order.description)
        .newLine(2)
        .addText(`–ë—é–¥–∂–µ—Ç: ${order.budget}`)
        .build();

    const nextIndex = (orderIndex + 1) % MOCK_ORDERS.length; // Loop through mock orders

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [
                { text: "üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `show_order_${nextIndex}` },
                { text: "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: `add_to_favorites_order_${order.id}` },
            ],
            [{ text: "üëç –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data: `apply_to_order_${order.id}` }],
            [{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "back_to_specialist_menu" }],
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showFavorites = async (client: TelegramClient, chatId: number, favoriteOrderIds: string[], messageId: number) => {
    const builder = new MessageBuilder()
        .addTitle("‚≠ê –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");

    if (!favoriteOrderIds || favoriteOrderIds.length === 0) {
        builder.newLine(2).addText("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.");
    } else {
        builder.newLine(2).addText("–í–æ—Ç –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:");
        favoriteOrderIds.forEach(id => {
            const order = MOCK_ORDERS.find(o => o.id === id);
            if (order) {
                builder.newLine().addListItem(order.title);
            }
        });
    }

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "back_to_specialist_menu" }]
        ]
    };

    return sendOrEdit(client, chatId, builder.build(), keyboard, messageId);
}

export const showProfile = async (client: TelegramClient, chatId: number, messageId: number) => {
    const specialistProfile = MOCK_SPECIALISTS[0]; // Assuming a single mock specialist for now
    const text = new MessageBuilder()
        .addTitle("‚öôÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)")
        .newLine(2)
        .addBold(`–ò–º—è: ${specialistProfile.name}`)
        .newLine()
        .addText(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${specialistProfile.profession}`)
        .newLine()
        .addText(`–û–ø—ã—Ç: ${specialistProfile.experience}`)
        .newLine()
        .addText(`–°—Ç–∞–≤–∫–∞: ${specialistProfile.rate}`)
        .newLine()
        .addText(`–ì–æ—Ä–æ–¥: ${specialistProfile.city}`)
        .newLine()
        .addText(`–¢–µ–≥–∏: ${specialistProfile.tags.join(', ')}`)
        .newLine()
        .addText(`–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: ${specialistProfile.portfolio}`)
        .newLine()
        .addText(`–û —Å–µ–±–µ: ${specialistProfile.about}`)
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "back_to_specialist_menu" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}