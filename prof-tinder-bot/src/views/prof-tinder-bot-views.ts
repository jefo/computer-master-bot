import type { TelegramClient } from "packages/telegram-client";
import type {
	InlineKeyboardMarkup,
	Message,
} from "packages/telegram-client/telegram-types";
import { MessageBuilder } from "../infra/message-builder";
import { MOCK_SPECIALISTS, Specialist } from "../app/mock-data";

// --- Generic Helper ---
async function sendOrEdit(
	client: TelegramClient,
	chatId: number,
	text: string,
	keyboard: InlineKeyboardMarkup,
	messageId?: number,
): Promise<Message> {
	const payload = {
		chat_id: chatId,
		text,
		reply_markup: keyboard,
		parse_mode: "MarkdownV2" as const,
	};
	if (messageId) {
		try {
			const result = await client.editMessageText({
				...payload,
				message_id: messageId,
			});
			return typeof result === "boolean"
				? { message_id: messageId, chat: { id: chatId }, date: Date.now() }
				: result;
		} catch (e) {
			console.warn(`Could not edit message: ${e}. Sending a new one.`);
			return await client.sendMessage(payload);
		}
	} else {
		return await client.sendMessage(payload);
	}
}

// --- Spec-based Flow ---

export const showRoleSelectionMenu = async (
	client: TelegramClient,
	chatId: number,
	messageId?: number,
) => {
	const text = new MessageBuilder()
		.addText("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ HIRE ‚Äî –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.")
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[{ text: "–Ø –∫–ª–∏–µ–Ω—Ç", callback_data: "role_client" }],
			[{ text: "–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data: "role_specialist" }],
		],
	};

	return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showProfessionFilterScreen = async (
    client: TelegramClient,
    chatId: number,
    messageId?: number,
) => {
    const text = new MessageBuilder()
        .addBold("–ö–∞–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤—ã –∏—â–µ—Ç–µ?")
        .build();

    const professions = [...new Set(MOCK_SPECIALISTS.map(s => s.profession))];
    const professionButtons = professions.map(p => ([{
        text: p,
        callback_data: `filter_profession_${p}`
    }]));

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚≠ê –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: "show_favorites" }],
            ...professionButtons,
        ],
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showFavoritesScreen = async (
    client: TelegramClient,
    chatId: number,
    favoriteSpecialists: Specialist[],
    messageId?: number,
) => {
    const text = new MessageBuilder()
        .addBold("‚≠ê –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        .build();

    let buttons: InlineKeyboardButton[][] = [];
    if (favoriteSpecialists.length === 0) {
        buttons.push([{
            text: "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç",
            callback_data: "no_op"
        }]);
    } else {
        buttons = favoriteSpecialists.map(s => ([{
            text: `üë§ ${s.name} - ${s.profession}`,
            callback_data: `view_specialist_${s.id}`
        }]));
    }

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            ...buttons,
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data: "role_client" }],
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}

export const showSpecialistCard = async (
	client: TelegramClient,
	chatId: number,
	specialist: Specialist,
    contextualCallback: { text: string, data: string },
	messageId?: number,
) => {

	const text = new MessageBuilder()
        .addText(`üë§ ${specialist.name} ‚Äî ${specialist.profession}`)
        .newLine()
        .addText(`üíº ${specialist.experience} | üí≤ ${specialist.rate}`)
        .newLine()
        .addText(`üè∑Ô∏è #${specialist.tags.join(" #")}`)
        .newLine()
        .addText(`üìé ${specialist.portfolio}`)
        .newLine(2)
        .addBold("–û —Å–µ–±–µ:")
        .newLine()
        .addText(specialist.about)
		.build();

	const keyboard: InlineKeyboardMarkup = {
		inline_keyboard: [
			[
				{ text: "üëç –ù–∞–ø–∏—Å–∞—Ç—å", callback_data: `contact_${specialist.id}` },
                { text: contextualCallback.text, callback_data: contextualCallback.data },
				{ text: "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: `favorite_${specialist.id}` },
			],
		],
	};

	return sendOrEdit(client, chatId, text, keyboard, messageId);
};

export const showNoMoreSpecialists = async (
    client: TelegramClient,
    chatId: number,
    messageId?: number,
) => {
    const text = new MessageBuilder()
        .addText("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        .build();
    
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [{ text: "‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data: "show_favorites" }],
            [{ text: "–ò—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data: "role_client" }]
        ]
    };

    return sendOrEdit(client, chatId, text, keyboard, messageId);
}